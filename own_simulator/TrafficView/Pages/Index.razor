@page "/"
@inject IJSRuntime JSRuntime;

<h1>Traffic sim</h1>

<canvas id="draw-area" width="512" height="512"></canvas>


@code
{
    static readonly Dictionary<TrafficLightState, string> TrafficStateToColor = new Dictionary<TrafficLightState, string>() 
    { 
        [TrafficLightState.Red] = "#ff0000",
        [TrafficLightState.Yellow] = "#ffff00",
        [TrafficLightState.Green] = "#00ff00",
    };
    static TrafficSim Simulator;

    Timer timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Simulator = new TrafficSim();

            Road start = new Road(new Vector2(10, 55), new Vector2(45, 55));
            Road end = new Road(new Vector2(65, 55), new Vector2(95, 55));
            Road endPath = new Road(new Vector2(95, 55), new Vector2(100, 55));
            end.AddOutgoingRoad(endPath);

            Simulator.AddRoad(start);
            Simulator.AddRoad(end);
            Simulator.AddRoad(endPath);

            Car car = new Car(start, start.RoadStart);
            start.AddVehicle(car);
            Simulator.AddVehicleToSim(car);



            Road startH = new Road(new Vector2(55, 10), new Vector2(55, 45));
            Road endH = new Road(new Vector2(55, 65), new Vector2(55, 95));
            Road endPathH = new Road(new Vector2(55, 95), new Vector2(55, 100));
            endH.AddOutgoingRoad(endPathH);

            Simulator.AddRoad(startH);
            Simulator.AddRoad(endH);
            Simulator.AddRoad(endPathH);

            Car car2 = new Car(startH, startH.RoadStart);
            start.AddVehicle(car2);
            Simulator.AddVehicleToSim(car2);



            TrafficLight tl = new TrafficLight(Simulator, new RoadConnectionGroup[]
            {
                new RoadConnectionGroup(new RoadConnection[]
                {
                    new RoadConnection(start, end)
                }),
                new RoadConnectionGroup(new RoadConnection[]
                {
                    new RoadConnection(startH, endH)
                })
            });

            Simulator.AddIntersection(tl);

            car.SetPathTo(endPath);
            car2.SetPathTo(endPathH);

            foreach (var road in Simulator.Roads)
            {
                MakeRoadRenderable(road);
            }

            foreach (var vehicle in Simulator.Vehicles)
            {
                MakeVehicleRenderable(vehicle);
            }


            timer = new Timer(16);
            timer.Elapsed += (_, __) => UpdateSim();
            timer.Start();

            await JSRuntime.InvokeVoidAsync("setRenderTraffic", new object[]
            {
                true
            });
        }
    }

    private void UpdateSim()
    {
        timer.Stop();
        Simulator.Tick();

        foreach (var vehicle in Simulator.Vehicles)
        {
            UpdateVehicleRenderPos(vehicle);
        }

        foreach (var vehicle in Simulator.RemovedVehicles)
        {
            RemoveRenderableVehicle(vehicle);
        }
        foreach (var vehicle in Simulator.AddedVehicles)
        {
            MakeVehicleRenderable(vehicle);
        }

        foreach (var intersection in Simulator.Intersections)
        {
            if (intersection is TrafficLight tl)
            {
                foreach (var group in tl.TrafficGroups)
                {
                    foreach (var road in group.InternalRoads)
                    {
                        UpdateRoadColor(road, TrafficStateToColor[group.State]);
                    }
                }
            }
        }

        timer.Start();
    }

    private async void MakeRoadRenderable(Road road)
    {
        await JSRuntime.InvokeVoidAsync("addRoad", new object[]
        {
            road.ID,
            road.RoadStart.X, road.RoadStart.Y,
            road.RoadEnd.X, road.RoadEnd.Y
        });
    }

    private async void MakeVehicleRenderable(Vehicle veh)
    {
        Road road = veh.CurrentRoad;
        Vector2 roadDir = Vector2.Normalize(road.RoadEnd - road.RoadStart);

        Vector2 carBack = veh.Pos - roadDir * (veh.Size);
        Vector2 carFront = veh.Pos;

        await JSRuntime.InvokeVoidAsync("addVehicle", new object[]
        {
            veh.ID,
            carBack.X, carBack.Y,
            carFront.X, carFront.Y,
            "#ff4400"
        });
    }

    private async void RemoveRenderableVehicle(Vehicle veh)
    {
        await JSRuntime.InvokeVoidAsync("removeVehicle", new object[]
        {
            veh.ID
        });
    }

    private async void UpdateVehicleRenderPos(Vehicle veh)
    {
        Road road = veh.CurrentRoad;
        Vector2 roadDir = Vector2.Normalize(road.RoadEnd - road.RoadStart);

        Vector2 carBack = veh.Pos - roadDir * (veh.Size);
        Vector2 carFront = veh.Pos;

        await JSRuntime.InvokeVoidAsync("updateVehiclePos", new object[]
        {
            veh.ID,
            carBack.X, carBack.Y,
            carFront.X, carFront.Y
        });
    }

    private async void UpdateRoadColor(Road road, string color)
    {
        await JSRuntime.InvokeVoidAsync("updateRoadColor", new object[]
        {
            road.ID,
            color
        });
    }

    private async void ClearCanvas()
    {
        await JSRuntime.InvokeVoidAsync("clearCanvas");
    }
}